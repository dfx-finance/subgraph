// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewCurve extends ethereum.Event {
  get params(): NewCurve__Params {
    return new NewCurve__Params(this);
  }
}

export class NewCurve__Params {
  _event: NewCurve;

  constructor(event: NewCurve) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get curve(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  curves(param0: Bytes): Address {
    let result = super.call("curves", "curves(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_curves(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("curves", "curves(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurve(_baseCurrency: Address, _quoteCurrency: Address): Address {
    let result = super.call("getCurve", "getCurve(address,address):(address)", [
      ethereum.Value.fromAddress(_baseCurrency),
      ethereum.Value.fromAddress(_quoteCurrency)
    ]);

    return result[0].toAddress();
  }

  try_getCurve(
    _baseCurrency: Address,
    _quoteCurrency: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCurve",
      "getCurve(address,address):(address)",
      [
        ethereum.Value.fromAddress(_baseCurrency),
        ethereum.Value.fromAddress(_quoteCurrency)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newCurve(
    _name: string,
    _symbol: string,
    _baseCurrency: Address,
    _quoteCurrency: Address,
    _baseWeight: BigInt,
    _quoteWeight: BigInt,
    _baseAssimilator: Address,
    _quoteAssimilator: Address
  ): Address {
    let result = super.call(
      "newCurve",
      "newCurve(string,string,address,address,uint256,uint256,address,address):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddress(_baseCurrency),
        ethereum.Value.fromAddress(_quoteCurrency),
        ethereum.Value.fromUnsignedBigInt(_baseWeight),
        ethereum.Value.fromUnsignedBigInt(_quoteWeight),
        ethereum.Value.fromAddress(_baseAssimilator),
        ethereum.Value.fromAddress(_quoteAssimilator)
      ]
    );

    return result[0].toAddress();
  }

  try_newCurve(
    _name: string,
    _symbol: string,
    _baseCurrency: Address,
    _quoteCurrency: Address,
    _baseWeight: BigInt,
    _quoteWeight: BigInt,
    _baseAssimilator: Address,
    _quoteAssimilator: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newCurve",
      "newCurve(string,string,address,address,uint256,uint256,address,address):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddress(_baseCurrency),
        ethereum.Value.fromAddress(_quoteCurrency),
        ethereum.Value.fromUnsignedBigInt(_baseWeight),
        ethereum.Value.fromUnsignedBigInt(_quoteWeight),
        ethereum.Value.fromAddress(_baseAssimilator),
        ethereum.Value.fromAddress(_quoteAssimilator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class NewCurveCall extends ethereum.Call {
  get inputs(): NewCurveCall__Inputs {
    return new NewCurveCall__Inputs(this);
  }

  get outputs(): NewCurveCall__Outputs {
    return new NewCurveCall__Outputs(this);
  }
}

export class NewCurveCall__Inputs {
  _call: NewCurveCall;

  constructor(call: NewCurveCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _baseCurrency(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _quoteCurrency(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _baseWeight(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _quoteWeight(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _baseAssimilator(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _quoteAssimilator(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class NewCurveCall__Outputs {
  _call: NewCurveCall;

  constructor(call: NewCurveCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
