###
### veDFX
###
type Lock @entity(immutable: true) {
  id: Bytes!
  address: Bytes! # address
  value: BigInt! # uint256
  locktime: BigInt! # uint256
  type: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity(immutable: true) {
  id: Bytes!
  address: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Supply @entity(immutable: true) {
  id: Bytes!
  prevSupply: BigDecimal!
  supply: BigDecimal!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

###
### Gauge Controller
###
type Vote @entity(immutable: true) {
  id: Bytes!
  voteFor: Bytes! # address
  weight: BigInt!
  totalWeight: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

##
## Gauge
##
type Gauge @entity(immutable: true) {
  id: ID!
  address: Bytes!
  decimals: Int!

  # mirrored from the smart contract
  lpt: Bytes! # addr
  lptAmount: BigInt!
  symbol: String!
  totalSupply: BigInt!
  # calculated
  totalWeight: BigInt!

  hourData: [GaugeHourData!]! @derivedFrom(field: "gauge")
}

type GaugeHourData @entity(immutable: true) {
  id: ID!
  hourStartUnix: Int! # unix timestamp for start of hour
  gauge: Gauge!
  lptAmount: BigInt!
  relativeWeight: BigInt!
  weight: BigInt!
  totalWeight: BigInt!
}

##
## DFX Distributor
##
type Rate @entity(immutable: true) {
  id: Bytes!
  rate: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Recovered @entity(immutable: true) {
  id: Bytes!
  tokenAddress: Bytes! # address
  to: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardDistributed @entity(immutable: true) {
  id: Bytes!
  gaugeAddr: Bytes! # address
  rewardTally: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
