type Deposit @entity(immutable: true) {
  id: Bytes!
  address: Bytes! # address
  value: BigInt! # uint256
  locktime: BigInt! # uint256
  type: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity(immutable: true) {
  id: Bytes!
  address: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Supply @entity(immutable: true) {
  id: Bytes!
  prevSupply: BigDecimal!
  supply: BigDecimal!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Vote @entity(immutable: true) {
  id: Bytes!
  voteFor: Bytes! # address
  weight: BigInt!
  totalWeight: BigInt!
  gaugeWeights: [GaugeWeight!]! @derivedFrom(field: "vote")
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GaugeWeight @entity {
  id: Bytes!
  gauge: Bytes! # address
  weight: BigInt!
  vote: Vote!
}

type Rate @entity(immutable: true) {
  id: Bytes!
  rate: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Recovered @entity(immutable: true) {
  id: Bytes!
  tokenAddress: Bytes! # address
  to: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardDistributed @entity(immutable: true) {
  id: Bytes!
  gaugeAddr: Bytes! # address
  rewardTally: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
